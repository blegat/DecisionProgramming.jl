var documenterSearchIndex = {"docs":
[{"location":"api/#API-1","page":"API","title":"API","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"paths\nSpecs\nDecisionGraph\nDecisionGraph(::Vector{Int}, ::Vector{Int}, ::Vector{Int}, ::Vector{Pair{Int, Int}}, ::Vector{Int})\nParams\nParams(::DecisionGraph, ::Dict{Int, Array{Float64}}, ::Dict{Int, Array{Int}}, ::Vector{Float64})\nDecisionModel\nDecisionModel(::Specs, ::DecisionGraph, ::Params)","category":"page"},{"location":"api/#DecisionProgramming.paths","page":"API","title":"DecisionProgramming.paths","text":"Iterate over paths.\n\n\n\n\n\n","category":"function"},{"location":"api/#DecisionProgramming.Specs","page":"API","title":"DecisionProgramming.Specs","text":"Specification for different model scenarios. For example, we can specify toggling on and off constraints and objectives.\n\nArguments\n\nprobability_sum_cut::Bool: Toggle probability sum cuts on and off.\nnum_paths::Int: If larger than zero, enables the number of paths cuts using the supplied value.\n\n\n\n\n\n","category":"type"},{"location":"api/#DecisionProgramming.DecisionGraph","page":"API","title":"DecisionProgramming.DecisionGraph","text":"Decision graph is a directed, acyclic graph.\n\nArguments\n\nC::Vector{Int}: Change nodes.\nD::Vector{Int}: Decision nodes.\nV::Vector{Int}: Value nodes.\nA::Vector{Pair{Int, Int}}: Arcs between nodes.\nS_j::Vector{Int}: Number of states.\nI_j::Vector{Vector{Int}}: Information set.\n\n\n\n\n\n","category":"type"},{"location":"api/#DecisionProgramming.DecisionGraph-Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1},Array{Pair{Int64,Int64},1},Array{Int64,1}}","page":"API","title":"DecisionProgramming.DecisionGraph","text":"Construct and validate a decision graph.\n\n\n\n\n\n","category":"method"},{"location":"api/#DecisionProgramming.Params","page":"API","title":"DecisionProgramming.Params","text":"Model parameters.\n\nArguments\n\nX: Probabilities, X[j][sI(j);sj], ∀j∈C\nY: Consequences, Y[j][s_I(j)], ∀j∈V\nU: Utilities map consequences to real valued outcomes.\n\n\n\n\n\n","category":"type"},{"location":"api/#DecisionProgramming.Params-Tuple{DecisionGraph,Dict{Int64,Array{Float64,N} where N},Dict{Int64,Array{Int64,N} where N},Array{Float64,1}}","page":"API","title":"DecisionProgramming.Params","text":"Construct and validate model parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#DecisionProgramming.DecisionModel","page":"API","title":"DecisionProgramming.DecisionModel","text":"Defines the DecisionModel type.\n\n\n\n\n\n","category":"type"},{"location":"api/#DecisionProgramming.DecisionModel-Tuple{Specs,DecisionGraph,Params}","page":"API","title":"DecisionProgramming.DecisionModel","text":"Initializes the DecisionModel.\n\n\n\n\n\n","category":"method"},{"location":"#DecisionProgramming.jl-1","page":"Home","title":"DecisionProgramming.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Documentation for DecisionProgramming.jl","category":"page"},{"location":"#Decision-Model-1","page":"Home","title":"Decision Model","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The model is based on [1]","category":"page"},{"location":"#Decision-Graph-1","page":"Home","title":"Decision Graph","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Decision graph is defined as a directed, acyclic graph","category":"page"},{"location":"#","page":"Home","title":"Home","text":"G=(NA)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The set of nodes N=CDV consists of changes nodes C decision nodes D and value nodes V.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"We index the nodes such that CD=1n and V=n+1n+V where n=C+D","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The set of edges consists of pairs such that","category":"page"},{"location":"#","page":"Home","title":"Home","text":"A(ij)1ijN","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Each node jCD is associates with a finite number of states","category":"page"},{"location":"#","page":"Home","title":"Home","text":"S_j=1S_j","category":"page"},{"location":"#","page":"Home","title":"Home","text":"We define the information set of node jN as","category":"page"},{"location":"#","page":"Home","title":"Home","text":"I(j)=i(ij)A","category":"page"},{"location":"#Paths-1","page":"Home","title":"Paths","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"A path is a sequence of states","category":"page"},{"location":"#","page":"Home","title":"Home","text":"s=(s_1 s_2 s_n)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"where each state s_iS_i for all chance and decision nodes iCD","category":"page"},{"location":"#","page":"Home","title":"Home","text":"A subpath is subsequence of path s that is,","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(s_i_1 s_i_2  s_i_k)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"where 1i_1i_2i_kn and kn","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The information path of node jN is a subpath defined as","category":"page"},{"location":"#","page":"Home","title":"Home","text":"s_I(j)=(s_i  iI(j))","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Concatenation of two paths s and s^ is denoted ss^","category":"page"},{"location":"#Sets-1","page":"Home","title":"Sets","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The set of all paths is the product set of all states","category":"page"},{"location":"#","page":"Home","title":"Home","text":"S=_jCD S_j","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The set of information paths of node jN is the product set of the states in its information set","category":"page"},{"location":"#","page":"Home","title":"Home","text":"S_I(j)=_iI(j) S_i","category":"page"},{"location":"#Probabilities-1","page":"Home","title":"Probabilities","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"For chance node jC, the probability of state s_j given information state s_I(j) is denoted","category":"page"},{"location":"#","page":"Home","title":"Home","text":"ℙ(X_j=s_jX_I(j)=s_I(j))0 1","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The upper bound of the probability of a path s is defined as","category":"page"},{"location":"#","page":"Home","title":"Home","text":"p(s) = _jC ℙ(X_j=s_jX_I(j)=s_I(j))","category":"page"},{"location":"#Decisions-1","page":"Home","title":"Decisions","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"For each decision node jD a local decision strategy maps information path to a state","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Z_jS_I(j)S_j","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Decision strategy Z contains one local decision strategy for each decision node. Set of all decision strategies is denoted ℤ","category":"page"},{"location":"#Consequences-1","page":"Home","title":"Consequences","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"For value node jV, the consequence given information state S_I(j)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Y_vS_I(j)ℂ","category":"page"},{"location":"#Utilities-1","page":"Home","title":"Utilities","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Utility function maps consequence to real-valued utilities","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Uℂℝ","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Affine transformation to positive utilities","category":"page"},{"location":"#","page":"Home","title":"Home","text":"U^(c) = U(c) - min_cℂU(c)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The utility of a path","category":"page"},{"location":"#","page":"Home","title":"Home","text":"mathcalU(s) = _jV U^(Y_j(s_I(j)))","category":"page"},{"location":"#Formulation-1","page":"Home","title":"Formulation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"beginaligned\nundersetZℤtextmaximizequad\n _sS π(s) mathcalU(s) \ntextsubject toquad\n _s_jS_j z(s_js_I(j))=1quad jD s_I(j)S_I(j) \n 0π(s)p(s)quad sS \n π(s)  z(s_js_I(j))quad sS \n z(s_js_I(j))  01quad jD s_jS_j s_I(j)S_I(j)\nendaligned","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Probability of path π(s)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Decision strategy z(s_js_I(j)), equivalence","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Active path s where π(s)0","category":"page"},{"location":"#Indexing-Paths-1","page":"Home","title":"Indexing Paths","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"States and paths","category":"page"},{"location":"#","page":"Home","title":"Home","text":"_iC (S_I(i)S_i) probability stages\n_iD (S_I(i)S_i) decision stages\n_iV S_I(i) utility stages","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Sizes","category":"page"},{"location":"#","page":"Home","title":"Home","text":"S=_iCD S_i Number of paths\n_iCS_I(i) S_i Number of probability stages\n_iDS_I(i) S_i Number of decision stages\n_vVS_I(v) Number of utility stages","category":"page"},{"location":"#Lazy-Cuts-1","page":"Home","title":"Lazy Cuts","text":"","category":"section"},{"location":"#References-1","page":"Home","title":"References","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"[1]: Salo, A., Andelmin, J., & Oliveira, F. (2019). Decision Programming for Multi-Stage Optimization under Uncertainty, 1–35. Retrieved from http://arxiv.org/abs/1910.09196","category":"page"}]
}
